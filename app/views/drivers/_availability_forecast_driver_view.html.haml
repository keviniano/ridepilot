:ruby
  if @total_available_drivers.any?
    # basics
    ticks = get_availability_chart_ticks(15)

    max_hour = current_provider.driver_availability_max_hour || 22
    max_hour_label = format_hour_label(max_hour) 

    day_of_week = date.wday

    run_driver_array = @total_assigned_runs.pluck(:id, :name, :scheduled_start_time, :scheduled_end_time, :driver_id)

    row_data = @total_available_drivers.map{|d| 
      driver_id = d.id
      runs = run_driver_array.select{|r| r[4] == driver_id}.collect{|r|
        {
          id: r[0],
          name: r[1],
          start_time_diff: (r[2] - r[2].at_beginning_of_day) / 3600.0,
          end_time_diff: (r[3] - r[3].at_beginning_of_day) / 3600.0,
        }
      }
      time_ranges = []
      leave_days = d.planned_leaves.current.pluck(:start_date, :end_date)
      is_on_leave = leave_days.select{|x| x[0] <= date && x[1] >= date}.any?

      daily_hours = d.daily_operating_hours.pluck(:id, :date, :is_all_day, :is_unavailable, :start_time, :end_time)
      daily_configs = daily_hours.select{|x| x[1] == date }
      if daily_configs.any?
        is_all_day = daily_configs.select{|x| x[2] == true }.any?
        is_unavailable = daily_configs.select{|x| x[3] == true }.any?
        if !is_unavailable && !is_all_day
          time_ranges = daily_configs.map{|x| [(x[4] - x[4].at_beginning_of_day) / 3600.0, (x[5] - x[5].at_beginning_of_day) / 3600.0]}
        end
      else
        recurring_hours = d.operating_hours.pluck(:id, :day_of_week, :is_all_day, :is_unavailable, :start_time, :end_time)
        recur_configs = recurring_hours.select{|x| x[1] == day_of_week }
        is_all_day = recur_configs.select{|x| x[2] == true }.any?
        is_unavailable = recur_configs.select{|x| x[3] == true }.any?
        if !is_unavailable && !is_all_day
          time_ranges = recur_configs.map{|x| [(x[4] - x[4].at_beginning_of_day) / 3600.0, (x[5] - x[5].at_beginning_of_day) / 3600.0]}
        end
      end

      if is_unavailable
        time_ranges = []
      elsif is_all_day
        time_ranges = [[0, 24]]
      end

      {
        id: driver_id,
        name: d.user_name,
        runs: runs || [],
        time_ranges: time_ranges || []
      }}
  end

:css
  .availability_forecast_driver_view_panel .panel-heading{
    background-color: gray;
    border-color: gray;
  }

  .driver-availability-table {
    margin-bottom: 0px;
    border-collapse: separate !important;
    border-spacing: 0 1em !important;
  }

  .driver-availability-table tr.odd {
    background: transparent;
  }

  .driver-availability-table td {
    border-top: none !important;
  }

  .driver-availability-table td.disabled {
    color: lightgray;
  }

  .driver-availability-table td {
    padding: 0px 5px !important;
  }

  .driver-availability-table td.chart_cell.is_filled {
    background-color: #9fdbef !important;
  }

  .driver-availability-table td.chart_cell.is_run_filled {
    background-color: #167ea0 !important;
  }

  .hour_tick_label {
    display: inline-block;
    padding: 0px;
    margin: 0px 0px 0px -5px;
  }

  .driver-availability-table a.link_disabled {
    pointer-events: none;
    cursor: default;
  }

  .driver-availability-table a.link_disabled i {
    color: lightgrey !important;
  }


.panel.panel-primary.availability_forecast_driver_view_panel
  .panel-heading
    .pull-right{style: 'padding-right: 0px;'}
      %span.panel-expand-collapse{title: 'Collapse/expand'}
        %i.fa.fa-chevron-up
    %b
      = "#{@total_available_drivers.size} Available Drivers: #{@total_assigned_driver_count} Assigned, #{@total_unassigned_available_driver_count} Unassigned"
      - if @total_on_leave_driver_count && @total_on_leave_driver_count > 0
        = ", and #{@total_on_leave_driver_count} Other(s) Absent"
  .panel-body.form-horizontal{style: 'padding:0px;'}
    .table-responsive{style: 'overflow: visible;'}
      - if @total_available_drivers.any?
        %table.table.table-condensed.driver-availability-table#driver_availability_table
          %thead
            %th
            - tick_count = ticks.size
            %th{colspan: tick_count}
              %div{style: 'width: 100%; white-space:nowrap;'}
                - label_tick_count = ticks.select{|x| !x[1].blank?}.size
                - ticks.each_with_index do |tick, index|
                  - next if tick[1].blank?
                  %span.hour_tick_label{style: "width: #{100/label_tick_count.to_f}%;"}= tick[1]
                %span.hour_tick_label= max_hour_label
            
            - if can?(:edit, Run)
              %th

          %tbody
            - row_data.each do |r|
              %tr{data: {id: r[:id], name: r[:name]}}
                %td{style: 'width: 100px !important; white-space: normal !important;'}
                  = link_to r[:name], driver_path(r[:id]), target: '_blank'
                - runs = r[:runs]
                - run_ids = runs.collect{|x| x[:id]}
                - time_ranges = r[:time_ranges]
                - last_run_name = nil
                - has_run = false
                - ticks.each do |tick|
                  - run = runs.select{|r| !(r[:end_time_diff] <= tick[0]) && !(r[:start_time_diff] >= tick[0])}.first
                  - has_run = true if run
                  - class_name = run ? 'is_run_filled' : ""
                  - if class_name.blank?
                    - class_name = 'is_filled' if time_ranges.select{|r| tick[0] >= r[0] && tick[0] <= r[1]}
                  - run_name = run ? run[:name] : ""
                  - if !run_name.blank? && run_name != last_run_name
                    - last_run_name = run_name
                    - class_name += " name_cell"
                  
                  %td.chart_cell{style: "white-space: nowrap !important; color: white;", class: class_name || "", data: {time_flag: tick[0], run_name: run_name, run_id: run && run[:id], run_start_time: run && run[:start_time_diff], run_end_time: run && run[:end_time_diff]}}
                - if can?(:edit, Run)
                  %td.pull-right
                    = link_to '#', class: has_run ? "unassign_run_link" : "unassign_run_link link_disabled" do 
                      %i.fa.fa-remove{style: 'color: red;'}
                    .dropdown{style: 'display: inline-block !important;'}
                      %button{type: 'button', data: {toggle: 'dropdown'}}
                        Assign
                        %span.caret
                      %ul.dropdown-menu.pull-right.runs_dropdown{style: 'z-index: 10000;'}
                        - runs_to_assign = []
                        - @drivers_available_for_runs.each do |run_id, drivers|
                          - run_covered = drivers.select{|driver_data| driver_data[:id] == r[:id]}.any?
                          - runs_to_assign << {id: run_id, name: drivers[0][:run_name]} if run_covered
                        - runs_to_assign.each do |r|
                          %li
                            %a{href:'#', data: {run_id: r[:id], run_name: r[:name], run_start_time: r[:run_start_time_diff], run_end_time: r[:run_end_time_diff]}}
                              = r[:name]

- if @total_available_drivers.any?
  :javascript
    var dialog;
    $(function() {
      // fixed table header
      $('#driver_availability_table').floatThead({ 
        scrollContainer: function($table){
          return $table.closest('.table-responsive');
        }
      });

      setTimeout(function() {
        $('#driver_availability_table tr td.name_cell').each(function() {
          $(this).text($(this).data('run-name'));
        });
      }, 200);

      function unassign_driver_from_runs(driver_id, run_ids) {
        $.ajax({
          url: "#{unassign_runs_driver_path('xxx')}".replace('xxx', driver_id),
          data: {
            run_ids: run_ids.join(',')
          },
          method: 'patch'
        });
      }

      function show_dialog_to_choose_run(driver_id, runs) {
        var dropdown_html = '' +
          '<div class="form-group">' + 
            '<label for="sel1">Select run to unassign the driver from:</label>' +
            '<select class="form-control" id="runs_to_unassign">' +
              '<option value="-1">All</option>';
        var all_run_ids = [];
        for (run_id in runs) {
          all_run_ids.push(run_id);
          dropdown_html += '<option value=' + run_id + '>' + runs[run_id] + '</option>';
        }
        dropdown_html += '' +
            '</select>' +
          '</div>';

        dialog = bootbox.dialog({
          title: 'Choose Run',
          message: dropdown_html,
          buttons: {
              cancel: {
                label: 'Cancel'
              },
              ok: {
                label: "OK",
                className: 'btn action-button',
                callback: function(){
                  var run_ids = [];
                  var selected_run_id = $('#runs_to_unassign option:selected').val();
                  if(selected_run_id == '-1') {
                    run_ids = all_run_ids;
                  } else {
                    run_ids = [selected_run_id];
                  }
                  unassign_driver_from_runs(driver_id, run_ids);
                }
              }
          }
        });
      }

      $('#driver_availability_table').on('click', '.unassign_run_link', function(e) {
        e.preventDefault();

        var driver_id = $(this).parents('tr').data('id');
        var driver_name = $(this).parents('tr').data('name');
        var run_ids = [];
        var run_names = [];
        var runs = {};

        $(this).parents('tr').find('td.name_cell').each(function() {
          var run_id = $(this).data('run-id');
          var run_name = $(this).data('run-name');
          run_ids.push(run_id);
          run_names.push(run_name);
          runs[run_id] = run_name;
        });

        if(run_ids.length > 1) {
          // further select
          show_dialog_to_choose_run(driver_id, runs);
        } else {
          var msg = "Please confirm you wish to remove <b>" + driver_name + "</b> as the driver of run <b>" + run_names.join(', ') + "</b>"
          bootbox.confirm(msg, function(result){
            if(result) {
              unassign_driver_from_runs(driver_id, run_ids);
            }
          });
        }

        return false;
      });
    });