:ruby
  # basics
  days_ahead = current_provider.driver_availability_days_ahead || 30
  ticks = get_availability_chart_ticks(current_provider.driver_availability_interval_min || 30)

  max_hour = current_provider.driver_availability_max_hour || 22
  max_hour_label = format_hour_label(max_hour) 

  # get row labels
  row_data = []
  provider_unavailable_wdays = current_provider.operating_hours.unavailable.pluck(:day_of_week)
  provider_hours_by_wday = {}
  current_provider.operating_hours.reorder(:day_of_week).each do |op_hour|
    if op_hour.is_unavailable
      p_min_hour = 0
      p_max_hour = 0
    elsif op_hour.is_all_day
      p_min_hour = 0
      p_max_hour = 24
    elsif op_hour.start_time && op_hour.end_time
      p_min_hour = (op_hour.start_time - op_hour.start_time.at_beginning_of_day) / 3600.0
      p_max_hour = (op_hour.end_time - op_hour.end_time.at_beginning_of_day) / 3600.0
      p_max_hour = 24 if p_max_hour == 0
    end
    provider_hours_by_wday[op_hour.day_of_week] = [p_min_hour, p_max_hour]
  end
  recurring_hours = operatable.operating_hours.pluck(:id, :day_of_week, :is_all_day, :is_unavailable, :start_time, :end_time)
  
  if !is_daily
    Date::DAYNAMES.each_with_index do |day_name, day_of_week|
      recur_configs = recurring_hours.select{|x| x[1] == day_of_week }
      is_all_day = recur_configs.select{|x| x[2] == true }.any?
      is_unavailable = recur_configs.select{|x| x[3] == true }.any?
      if !is_unavailable && !is_all_day
        time_ranges = recur_configs.map{|x| [(x[4] - x[4].at_beginning_of_day) / 3600.0, (x[5] - x[5].at_beginning_of_day) / 3600.0]}
      end
      row_data << {
        id: day_of_week,
        label: day_name,
        is_all_day: is_all_day,
        is_provider_unavailable: provider_unavailable_wdays.include?(day_of_week),
        provider_hours: provider_hours_by_wday[day_of_week],
        is_unavailable: is_unavailable,
        time_ranges: time_ranges || []
      }
    end
  else
    start_day = Date.today
    daily_hours = operatable.daily_operating_hours.pluck(:id, :date, :is_all_day, :is_unavailable, :start_time, :end_time)
    leave_days = operatable.planned_leaves.current.pluck(:start_date, :end_date)
    days_ahead.times do
      day_of_week = start_day.wday
      is_on_leave = leave_days.select{|x| x[0] <= start_day && x[1] >= start_day}.any?
      
      daily_configs = daily_hours.select{|x| x[1] == start_day }
      if daily_configs.any?
        is_all_day = daily_configs.select{|x| x[2] == true }.any?
        is_unavailable = daily_configs.select{|x| x[3] == true }.any?
        if !is_unavailable && !is_all_day
          time_ranges = daily_configs.map{|x| [(x[4] - x[4].at_beginning_of_day) / 3600.0, (x[5] - x[5].at_beginning_of_day) / 3600.0]}
        end
      else
        recur_configs = recurring_hours.select{|x| x[1] == day_of_week }
        is_all_day = recur_configs.select{|x| x[2] == true }.any?
        is_unavailable = recur_configs.select{|x| x[3] == true }.any?
        if !is_unavailable && !is_all_day
          time_ranges = recur_configs.map{|x| [(x[4] - x[4].at_beginning_of_day) / 3600.0, (x[5] - x[5].at_beginning_of_day) / 3600.0]}
        end
      end

      row_data << {
        id: start_day,
        label: start_day.strftime('%a %m/%d'),
        is_all_day: is_all_day,
        is_provider_unavailable: provider_unavailable_wdays.include?(day_of_week),
        provider_hours: provider_hours_by_wday[day_of_week],
        is_on_leave: is_on_leave,
        is_unavailable: is_unavailable,
        time_ranges: time_ranges || [] 
      }
      start_day += 1.day
    end
  end

:css
  .availability-table {
    margin-bottom: 0px;
    border-collapse: separate !important;
    border-spacing: 0 1em !important;
  }

  .availability-table tr.odd {
    background: transparent;
  }

  .availability-table td {
    border-top: none !important;
  }

  .availability-table td.disabled {
    color: lightgray;
  }

  .availability-table td {
    padding: 0px 5px !important;
  }

  .is_disabled {
    background-color: lightgray;
  }

  .is_on_leave {
    background-color: #ffe664;
  }

  .is_filled, .is_all_day_filled {
    background-color: #3eb76a;
  }

  .hour_tick_label {
    display: inline-block;
    padding: 0px;
    margin: 0px 0px 0px -5px;
  }


- table_css_class = is_daily ? "daily_availability" : "recur_availability"
- table_id = is_daily ? "daily_availability_table" : "recur_availability_table"
.table-responsive{style: 'max-height: 350px; overflow-y: auto;'}
  %table.table.table-condensed.availability-table{class: table_css_class, id: table_id}
    %thead
      %th
      %th All Day
      - tick_count = ticks.size
      - if tick_count > 0
        %th{colspan: tick_count, style: 'padding: 0px;'}
          %div{style: 'width: 100%; white-space:nowrap;'}
            - label_tick_count = ticks.select{|x| !x[1].blank?}.size
            - last_label_tick = ticks.reverse.select{|x| !x[1].blank?}.first
            - divided_by = label_tick_count - 1 + (max_hour - last_label_tick[0]).to_f / get_availability_tick_hour_gap
            - ticks.each_with_index do |tick, index|
              - next if tick[1].blank? || tick == last_label_tick
              %span.hour_tick_label{style: "width: #{100/divided_by.to_f}%;"}= tick[1]
            - last_pct = 100/divided_by.to_f * (max_hour - last_label_tick[0]).to_f / get_availability_tick_hour_gap
            %span.hour_tick_label{style: "width: #{last_pct}%;"}
              = last_label_tick[1] if last_pct > 5
            %span.hour_tick_label= max_hour_label 
      
      - if can?(:edit, operatable)
        %th

    %tbody
      - row_data.each do |row|
        %tr{data: {date_value: row[:id]}}
          - provider_hours = row[:provider_hours].compact
          - is_on_leave = row[:is_on_leave]
          - is_disabled = row[:is_provider_unavailable] || is_on_leave
          - is_all_day = row[:is_all_day]
          - is_unavailable = row[:is_unavailable]
          - time_ranges = row[:time_ranges]
          %td{class: is_disabled ? "disabled" : "", style: 'width: 100px !important; white-space: normal !important;'}
            = row[:label]
          %td{style: 'width: 50px !important; white-space: normal !important;'}
            - unless is_disabled
              = check_box_tag "all_day", "is_all_day", is_all_day, disabled: is_disabled, class: "is_all_day"
          - ticks.each do |tick|
            - is_provider_unavailable = provider_hours.any? ? !(provider_hours[0] <= tick[0] && provider_hours[1] > tick[0]) : false
            - class_name = is_on_leave ? "is_on_leave" : (is_provider_unavailable ? "is_disabled" : (is_all_day ? "is_all_day_filled" : ""))
            - if class_name.blank?
              - hour_block = time_ranges.select{|x| x[0] <= tick[0] && x[1] > tick[0]}.first
              - is_filled = hour_block.present?
              - class_name = "is_filled" if is_filled
            - title = hour_tooltip(is_on_leave, is_provider_unavailable, is_all_day, hour_block.try(:[], 0), hour_block.try(:[], 1), provider_hours)
            %td.hour_cell{style: "white-space: nowrap !important; color: white;", class: class_name || "", data: {time_flag: tick[0]}, title: title}
          - if can?(:edit, operatable)
            %td{style: 'width: 100px !important; white-space: normal !important;'}
              - unless is_disabled
                .pull-right
                  = link_to '#', title: 'New hours' do 
                    %i.fa.fa-plus.new_hour{style: 'font-size: 1.5em;'}
                  - if is_daily
                    = link_to '#', title: 'Clear settings' do 
                      %i.fa.fa-remove.is_unavailable{style: 'color: red; font-size: 1.5em;'}
                    = link_to '#', title: 'Restore recurring settings' do 
                      %i.fa.fa-undo.clear_hours{style: 'font-size: 1.5em;'}
                  - else
                    = link_to '#', title: 'Clear settings' do 
                      %i.fa.fa-remove.clear_hours{style: 'color: red; font-size: 1.5em;'}

:javascript
  $(function() {

    var operatable_id = #{operatable.id};
    var operatable_type = "#{operatable.class.name}";
    var container_class = "#{table_css_class}";
    var is_daily = #{is_daily || false};

    var new_hour_url = "#{is_daily ? new_daily_operating_hour_path : new_operating_hour_path}";
    var add_url = "#{is_daily ? add_daily_operating_hours_path : add_operating_hours_path}";
    var remove_url = "#{is_daily ? remove_daily_operating_hours_path : remove_operating_hours_path}";
    var clear_confirmation_msg = "#{is_daily ? 'Are you sure to reset to be using recurring settings?' : 'Are you sure to clear the settings?'}"

    function add_segment(date, start_time, end_time) {
      $.ajax({
        url: add_url,
        method: 'post',
        data: {
          date_flag: date,
          operatable_id: operatable_id,
          operatable_type: operatable_type,
          is_all_day: false,
          start_time: start_time,
          end_time: end_time
        }
      });
    }

    function mark_all_day(date) {
      $.ajax({
        url: add_url,
        method: 'post',
        data: {
          date_flag: date,
          operatable_id: operatable_id,
          operatable_type: operatable_type,
          is_all_day: true
        }
      });
    }

    function mark_unavailable(date) {
      $.ajax({
        url: add_url,
        method: 'post',
        data: {
          date_flag: date,
          operatable_id: operatable_id,
          operatable_type: operatable_type,
          is_unavailable: true
        }
      });
    }

    function clear_hours(date) {
      $.ajax({
        url: remove_url,
        method: 'delete',
        data: {
          date_flag: date,
          operatable_id: operatable_id,
          operatable_type: operatable_type
        }
      });
    }

    function add_new_hour(date) {
      $.ajax({
        url: new_hour_url,
        data: {
          date_flag: date,
          operatable_id: operatable_id,
          operatable_type: operatable_type
        }
      });
    }

    // fixed table header
    $('table.' + container_class).floatThead({
      scrollContainer: function($table){
        return $table.closest('.table-responsive');
      }
    });

    // change All Day checkbox
    $('table.' + container_class + ' input[type=checkbox].is_all_day').change(function() {
      var is_all_day = $(this).is(':checked');
      var date = $(this).parents('tr').data('date-value');
      if(is_all_day) {
        mark_all_day(date);
      } else {
        mark_unavailable(date);
      }
    });

    // Clear daily settings
    $('table.' + container_class + ' .is_unavailable').click(function(e) {
      e.preventDefault();
      var date = $(this).parents('tr').data('date-value');
      bootbox.confirm('Are you sure to clear the settings?', function(result) {
        if(result) {
          mark_unavailable(date);
        }
      });
      return false;
    });

    // Clear Hours
    $('table.' + container_class + ' .clear_hours').click(function(e) {
      e.preventDefault();
      var date = $(this).parents('tr').data('date-value');
      bootbox.confirm(clear_confirmation_msg, function(result) {
        if(result) {
          clear_hours(date);
        }
      });
    });

    // Add new Hour
    $('table.' + container_class + ' .new_hour').click(function(e) {
      e.preventDefault();
      var date = $(this).parents('tr').data('date-value');
      add_new_hour(date);
    });
  });