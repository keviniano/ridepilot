var date = "<%= params[:date_flag] %>";
var is_all_day = <%= @is_all_day || false %>;
var is_unavailable = <%= @is_unavailable || false %>;
var daily_table = $('table.daily_availability');
var daily_row = daily_table.find("tr[data-date-value=" + date+ "]");

if(is_all_day) {
  daily_row.find('td.is_filled').removeClass('is_filled');
  daily_row.find('td.hour_cell').addClass('is_all_day_filled');
  daily_row.find('td.hour_cell').prop('title', "All day");
} else if(is_unavailable) {
  daily_row.find('input.is_all_day').prop('checked', false);
  daily_row.find('td.is_filled').removeClass('is_filled');
  daily_row.find('td.is_all_day_filled').removeClass('is_all_day_filled');
  daily_row.find('td.hour_cell').prop('title', "");
} else {
  $('#modal-dialog').modal('hide');
  var has_error = <%= @has_error || false %>;
  if(has_error) {
    show_alert_dialog("There is error updating operating hours. Please make sure From Time is earlier than To Time.");
  } else {
    daily_row.find('input.is_all_day').prop('checked', false);
    daily_row.find('td.is_all_day_filled').removeClass('is_all_day_filled');
    daily_row.find('td.hour_cell').prop('title', "");
    
    function find_hour_block(time_flag) {
      var time_ranges = <%= @time_ranges || [] %>;
      var range_size = time_ranges.length;
      var hour_block = null;
      for(var i=0; i< range_size; i++) {
        var time_range = time_ranges[i];
        if(time_range[0] <= time_flag && time_range[1] > time_flag) {
          hour_block = time_range;
          break;
        }
      }

      return hour_block;
    }

    daily_row.find('td.hour_cell').each(function(){
      var time_flag = parseFloat($(this).data('time-flag'));
      var hour_block = find_hour_block(time_flag);
      if(hour_block) {
        $(this).addClass('is_filled');
        $(this).prop("title", format_hour(hour_block[0]) + "-" + format_hour(hour_block[1]));
      }
    });
  }
}

